// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/subset.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Subset struct {
	Values               map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Subset) Reset()         { *m = Subset{} }
func (m *Subset) String() string { return proto.CompactTextString(m) }
func (*Subset) ProtoMessage()    {}
func (*Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b102e418fb8ab4ba, []int{0}
}
func (m *Subset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subset.Unmarshal(m, b)
}
func (m *Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subset.Marshal(b, m, deterministic)
}
func (m *Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subset.Merge(m, src)
}
func (m *Subset) XXX_Size() int {
	return xxx_messageInfo_Subset.Size(m)
}
func (m *Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_Subset proto.InternalMessageInfo

func (m *Subset) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Subset)(nil), "gloo.solo.io.Subset")
	proto.RegisterMapType((map[string]string)(nil), "gloo.solo.io.Subset.ValuesEntry")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/subset.proto", fileDescriptor_b102e418fb8ab4ba)
}

var fileDescriptor_b102e418fb8ab4ba = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xce, 0xcf, 0xc9, 0xd7, 0xcd, 0xcc, 0xd7, 0x4f,
	0xcf, 0xc9, 0xcf, 0xd7, 0x2f, 0x28, 0xca, 0xcf, 0x4a, 0x4d, 0x2e, 0x29, 0x86, 0xf0, 0x12, 0x0b,
	0x32, 0xf5, 0xcb, 0x0c, 0xf5, 0x8b, 0x4b, 0x93, 0x8a, 0x53, 0x4b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x78, 0x40, 0x32, 0x7a, 0x20, 0x4d, 0x7a, 0x99, 0xf9, 0x52, 0x22, 0xe9, 0xf9, 0xe9,
	0xf9, 0x60, 0x09, 0x7d, 0x10, 0x0b, 0xa2, 0x46, 0xa9, 0x96, 0x8b, 0x2d, 0x18, 0xac, 0x47, 0xc8,
	0x82, 0x8b, 0xad, 0x2c, 0x31, 0xa7, 0x34, 0xb5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48,
	0x41, 0x0f, 0x59, 0xbb, 0x1e, 0x44, 0x95, 0x5e, 0x18, 0x58, 0x89, 0x6b, 0x5e, 0x49, 0x51, 0x65,
	0x10, 0x54, 0xbd, 0x94, 0x25, 0x17, 0x37, 0x92, 0xb0, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0xa5,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x0a, 0x56, 0x2a, 0xc1,
	0x04, 0x16, 0x83, 0x70, 0xac, 0x98, 0x2c, 0x18, 0x9d, 0xcc, 0x56, 0x3c, 0x92, 0x63, 0x8c, 0x32,
	0x20, 0xce, 0x8f, 0x05, 0xd9, 0xe9, 0x50, 0x7f, 0x26, 0xb1, 0x81, 0x5d, 0x6f, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0xc3, 0x58, 0x1b, 0x1e, 0x01, 0x00, 0x00,
}

func (this *Subset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subset)
	if !ok {
		that2, ok := that.(Subset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
