// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/reconcile"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
)

// Option to copy anything from the original to the desired before writing. Return value of false means don't update
type TransitionProxyFunc func(original, desired *Proxy) (bool, error)

type ProxyReconciler interface {
	Reconcile(namespace string, desiredResources ProxyList, transition TransitionProxyFunc, opts clients.ListOpts) error
}

func proxysToResources(list ProxyList) resources.ResourceList {
	var resourceList resources.ResourceList
	for _, proxy := range list {
		resourceList = append(resourceList, proxy)
	}
	return resourceList
}

func NewProxyReconciler(client ProxyClient) ProxyReconciler {
	return &proxyReconciler{
		base: reconcile.NewReconciler(client.BaseClient()),
	}
}

type proxyReconciler struct {
	base reconcile.Reconciler
}

func (r *proxyReconciler) Reconcile(namespace string, desiredResources ProxyList, transition TransitionProxyFunc, opts clients.ListOpts) error {
	opts = opts.WithDefaults()
	opts.Ctx = contextutils.WithLogger(opts.Ctx, "proxy_reconciler")
	var transitionResources reconcile.TransitionResourcesFunc
	if transition != nil {
		transitionResources = func(original, desired resources.Resource) (bool, error) {
			return transition(original.(*Proxy), desired.(*Proxy))
		}
	}
	return r.base.Reconcile(namespace, proxysToResources(desiredResources), transitionResources, opts)
}
