// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: version_manager.proto

package v1alpha3 // import "istio.io/api/networking/v1alpha3"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"
import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VersionManager struct {
	DefaultVersion       string                `protobuf:"bytes,1,opt,name=default_version,json=defaultVersion,proto3" json:"default_version,omitempty"`
	RetryPolicy          *RetryPolicy          `protobuf:"bytes,4,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	SidecarVersionSpec   []*SidecarVersionSpec `protobuf:"bytes,2,rep,name=sidecar_version_spec,json=sidecarVersionSpec,proto3" json:"sidecar_version_spec,omitempty"`
	Status               *Status               `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VersionManager) Reset()         { *m = VersionManager{} }
func (m *VersionManager) String() string { return proto.CompactTextString(m) }
func (*VersionManager) ProtoMessage()    {}
func (*VersionManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{0}
}
func (m *VersionManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VersionManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionManager.Merge(dst, src)
}
func (m *VersionManager) XXX_Size() int {
	return m.Size()
}
func (m *VersionManager) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionManager.DiscardUnknown(m)
}

var xxx_messageInfo_VersionManager proto.InternalMessageInfo

func (m *VersionManager) GetDefaultVersion() string {
	if m != nil {
		return m.DefaultVersion
	}
	return ""
}

func (m *VersionManager) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *VersionManager) GetSidecarVersionSpec() []*SidecarVersionSpec {
	if m != nil {
		return m.SidecarVersionSpec
	}
	return nil
}

func (m *VersionManager) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SidecarVersionSpec struct {
	// Types that are valid to be assigned to Selector:
	//	*SidecarVersionSpec_ViaDeployment
	//	*SidecarVersionSpec_ViaService
	//	*SidecarVersionSpec_ViaStatefulSet
	//	*SidecarVersionSpec_ViaLabelSelector
	Selector        isSidecarVersionSpec_Selector `protobuf_oneof:"selector"`
	ExpectedVersion string                        `protobuf:"bytes,5,opt,name=expected_version,json=expectedVersion,proto3" json:"expected_version,omitempty"`
	// calculate hashcode of pods update status , to confirm if an update is needed
	PodsHash             string   `protobuf:"bytes,6,opt,name=pods_hash,json=podsHash,proto3" json:"pods_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SidecarVersionSpec) Reset()         { *m = SidecarVersionSpec{} }
func (m *SidecarVersionSpec) String() string { return proto.CompactTextString(m) }
func (*SidecarVersionSpec) ProtoMessage()    {}
func (*SidecarVersionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{1}
}
func (m *SidecarVersionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidecarVersionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidecarVersionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SidecarVersionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarVersionSpec.Merge(dst, src)
}
func (m *SidecarVersionSpec) XXX_Size() int {
	return m.Size()
}
func (m *SidecarVersionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarVersionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarVersionSpec proto.InternalMessageInfo

type isSidecarVersionSpec_Selector interface {
	isSidecarVersionSpec_Selector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SidecarVersionSpec_ViaDeployment struct {
	ViaDeployment *ViaDeployment `protobuf:"bytes,1,opt,name=via_deployment,json=viaDeployment,proto3,oneof"`
}
type SidecarVersionSpec_ViaService struct {
	ViaService *ViaService `protobuf:"bytes,2,opt,name=via_service,json=viaService,proto3,oneof"`
}
type SidecarVersionSpec_ViaStatefulSet struct {
	ViaStatefulSet *ViaStatefulSet `protobuf:"bytes,3,opt,name=via_stateful_set,json=viaStatefulSet,proto3,oneof"`
}
type SidecarVersionSpec_ViaLabelSelector struct {
	ViaLabelSelector *ViaLabelSelector `protobuf:"bytes,4,opt,name=via_label_selector,json=viaLabelSelector,proto3,oneof"`
}

func (*SidecarVersionSpec_ViaDeployment) isSidecarVersionSpec_Selector()    {}
func (*SidecarVersionSpec_ViaService) isSidecarVersionSpec_Selector()       {}
func (*SidecarVersionSpec_ViaStatefulSet) isSidecarVersionSpec_Selector()   {}
func (*SidecarVersionSpec_ViaLabelSelector) isSidecarVersionSpec_Selector() {}

func (m *SidecarVersionSpec) GetSelector() isSidecarVersionSpec_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *SidecarVersionSpec) GetViaDeployment() *ViaDeployment {
	if x, ok := m.GetSelector().(*SidecarVersionSpec_ViaDeployment); ok {
		return x.ViaDeployment
	}
	return nil
}

func (m *SidecarVersionSpec) GetViaService() *ViaService {
	if x, ok := m.GetSelector().(*SidecarVersionSpec_ViaService); ok {
		return x.ViaService
	}
	return nil
}

func (m *SidecarVersionSpec) GetViaStatefulSet() *ViaStatefulSet {
	if x, ok := m.GetSelector().(*SidecarVersionSpec_ViaStatefulSet); ok {
		return x.ViaStatefulSet
	}
	return nil
}

func (m *SidecarVersionSpec) GetViaLabelSelector() *ViaLabelSelector {
	if x, ok := m.GetSelector().(*SidecarVersionSpec_ViaLabelSelector); ok {
		return x.ViaLabelSelector
	}
	return nil
}

func (m *SidecarVersionSpec) GetExpectedVersion() string {
	if m != nil {
		return m.ExpectedVersion
	}
	return ""
}

func (m *SidecarVersionSpec) GetPodsHash() string {
	if m != nil {
		return m.PodsHash
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SidecarVersionSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SidecarVersionSpec_OneofMarshaler, _SidecarVersionSpec_OneofUnmarshaler, _SidecarVersionSpec_OneofSizer, []interface{}{
		(*SidecarVersionSpec_ViaDeployment)(nil),
		(*SidecarVersionSpec_ViaService)(nil),
		(*SidecarVersionSpec_ViaStatefulSet)(nil),
		(*SidecarVersionSpec_ViaLabelSelector)(nil),
	}
}

func _SidecarVersionSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SidecarVersionSpec)
	// selector
	switch x := m.Selector.(type) {
	case *SidecarVersionSpec_ViaDeployment:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViaDeployment); err != nil {
			return err
		}
	case *SidecarVersionSpec_ViaService:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViaService); err != nil {
			return err
		}
	case *SidecarVersionSpec_ViaStatefulSet:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViaStatefulSet); err != nil {
			return err
		}
	case *SidecarVersionSpec_ViaLabelSelector:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViaLabelSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SidecarVersionSpec.Selector has unexpected type %T", x)
	}
	return nil
}

func _SidecarVersionSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SidecarVersionSpec)
	switch tag {
	case 1: // selector.via_deployment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViaDeployment)
		err := b.DecodeMessage(msg)
		m.Selector = &SidecarVersionSpec_ViaDeployment{msg}
		return true, err
	case 2: // selector.via_service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViaService)
		err := b.DecodeMessage(msg)
		m.Selector = &SidecarVersionSpec_ViaService{msg}
		return true, err
	case 3: // selector.via_stateful_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViaStatefulSet)
		err := b.DecodeMessage(msg)
		m.Selector = &SidecarVersionSpec_ViaStatefulSet{msg}
		return true, err
	case 4: // selector.via_label_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViaLabelSelector)
		err := b.DecodeMessage(msg)
		m.Selector = &SidecarVersionSpec_ViaLabelSelector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SidecarVersionSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SidecarVersionSpec)
	// selector
	switch x := m.Selector.(type) {
	case *SidecarVersionSpec_ViaDeployment:
		s := proto.Size(x.ViaDeployment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SidecarVersionSpec_ViaService:
		s := proto.Size(x.ViaService)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SidecarVersionSpec_ViaStatefulSet:
		s := proto.Size(x.ViaStatefulSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SidecarVersionSpec_ViaLabelSelector:
		s := proto.Size(x.ViaLabelSelector)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ViaDeployment struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViaDeployment) Reset()         { *m = ViaDeployment{} }
func (m *ViaDeployment) String() string { return proto.CompactTextString(m) }
func (*ViaDeployment) ProtoMessage()    {}
func (*ViaDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{2}
}
func (m *ViaDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViaDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViaDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ViaDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViaDeployment.Merge(dst, src)
}
func (m *ViaDeployment) XXX_Size() int {
	return m.Size()
}
func (m *ViaDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_ViaDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_ViaDeployment proto.InternalMessageInfo

func (m *ViaDeployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ViaService struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViaService) Reset()         { *m = ViaService{} }
func (m *ViaService) String() string { return proto.CompactTextString(m) }
func (*ViaService) ProtoMessage()    {}
func (*ViaService) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{3}
}
func (m *ViaService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViaService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViaService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ViaService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViaService.Merge(dst, src)
}
func (m *ViaService) XXX_Size() int {
	return m.Size()
}
func (m *ViaService) XXX_DiscardUnknown() {
	xxx_messageInfo_ViaService.DiscardUnknown(m)
}

var xxx_messageInfo_ViaService proto.InternalMessageInfo

func (m *ViaService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ViaStatefulSet struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViaStatefulSet) Reset()         { *m = ViaStatefulSet{} }
func (m *ViaStatefulSet) String() string { return proto.CompactTextString(m) }
func (*ViaStatefulSet) ProtoMessage()    {}
func (*ViaStatefulSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{4}
}
func (m *ViaStatefulSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViaStatefulSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViaStatefulSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ViaStatefulSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViaStatefulSet.Merge(dst, src)
}
func (m *ViaStatefulSet) XXX_Size() int {
	return m.Size()
}
func (m *ViaStatefulSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ViaStatefulSet.DiscardUnknown(m)
}

var xxx_messageInfo_ViaStatefulSet proto.InternalMessageInfo

func (m *ViaStatefulSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ViaLabelSelector struct {
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ViaLabelSelector) Reset()         { *m = ViaLabelSelector{} }
func (m *ViaLabelSelector) String() string { return proto.CompactTextString(m) }
func (*ViaLabelSelector) ProtoMessage()    {}
func (*ViaLabelSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{5}
}
func (m *ViaLabelSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViaLabelSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViaLabelSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ViaLabelSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViaLabelSelector.Merge(dst, src)
}
func (m *ViaLabelSelector) XXX_Size() int {
	return m.Size()
}
func (m *ViaLabelSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ViaLabelSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ViaLabelSelector proto.InternalMessageInfo

func (m *ViaLabelSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RetryPolicy struct {
	NeverRetry           bool            `protobuf:"varint,1,opt,name=never_retry,json=neverRetry,proto3" json:"never_retry,omitempty"`
	RetryTime            int32           `protobuf:"varint,2,opt,name=retry_time,json=retryTime,proto3" json:"retry_time,omitempty"`
	RetryInterval        *types.Duration `protobuf:"bytes,3,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RetryPolicy) Reset()         { *m = RetryPolicy{} }
func (m *RetryPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryPolicy) ProtoMessage()    {}
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{6}
}
func (m *RetryPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RetryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryPolicy.Merge(dst, src)
}
func (m *RetryPolicy) XXX_Size() int {
	return m.Size()
}
func (m *RetryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryPolicy proto.InternalMessageInfo

func (m *RetryPolicy) GetNeverRetry() bool {
	if m != nil {
		return m.NeverRetry
	}
	return false
}

func (m *RetryPolicy) GetRetryTime() int32 {
	if m != nil {
		return m.RetryTime
	}
	return 0
}

func (m *RetryPolicy) GetRetryInterval() *types.Duration {
	if m != nil {
		return m.RetryInterval
	}
	return nil
}

type Status struct {
	SyncTime             string              `protobuf:"bytes,1,opt,name=sync_time,json=syncTime,proto3" json:"sync_time,omitempty"`
	PodVersionStatus     []*PodVersionStatus `protobuf:"bytes,2,rep,name=pod_version_status,json=podVersionStatus,proto3" json:"pod_version_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{7}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSyncTime() string {
	if m != nil {
		return m.SyncTime
	}
	return ""
}

func (m *Status) GetPodVersionStatus() []*PodVersionStatus {
	if m != nil {
		return m.PodVersionStatus
	}
	return nil
}

type PodVersionStatus struct {
	PodName              string   `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	CurrentVersion       string   `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	LastUpdateTime       string   `protobuf:"bytes,3,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	StatusCode           int32    `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage        string   `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodVersionStatus) Reset()         { *m = PodVersionStatus{} }
func (m *PodVersionStatus) String() string { return proto.CompactTextString(m) }
func (*PodVersionStatus) ProtoMessage()    {}
func (*PodVersionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_manager_4fec15acf1756441, []int{8}
}
func (m *PodVersionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodVersionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodVersionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PodVersionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodVersionStatus.Merge(dst, src)
}
func (m *PodVersionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodVersionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodVersionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodVersionStatus proto.InternalMessageInfo

func (m *PodVersionStatus) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *PodVersionStatus) GetCurrentVersion() string {
	if m != nil {
		return m.CurrentVersion
	}
	return ""
}

func (m *PodVersionStatus) GetLastUpdateTime() string {
	if m != nil {
		return m.LastUpdateTime
	}
	return ""
}

func (m *PodVersionStatus) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *PodVersionStatus) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionManager)(nil), "istio.networking.v1alpha3.VersionManager")
	proto.RegisterType((*SidecarVersionSpec)(nil), "istio.networking.v1alpha3.SidecarVersionSpec")
	proto.RegisterType((*ViaDeployment)(nil), "istio.networking.v1alpha3.ViaDeployment")
	proto.RegisterType((*ViaService)(nil), "istio.networking.v1alpha3.ViaService")
	proto.RegisterType((*ViaStatefulSet)(nil), "istio.networking.v1alpha3.ViaStatefulSet")
	proto.RegisterType((*ViaLabelSelector)(nil), "istio.networking.v1alpha3.ViaLabelSelector")
	proto.RegisterMapType((map[string]string)(nil), "istio.networking.v1alpha3.ViaLabelSelector.LabelsEntry")
	proto.RegisterType((*RetryPolicy)(nil), "istio.networking.v1alpha3.RetryPolicy")
	proto.RegisterType((*Status)(nil), "istio.networking.v1alpha3.Status")
	proto.RegisterType((*PodVersionStatus)(nil), "istio.networking.v1alpha3.PodVersionStatus")
}
func (m *VersionManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DefaultVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.DefaultVersion)))
		i += copy(dAtA[i:], m.DefaultVersion)
	}
	if len(m.SidecarVersionSpec) > 0 {
		for _, msg := range m.SidecarVersionSpec {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVersionManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RetryPolicy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.RetryPolicy.Size()))
		n1, err := m.RetryPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Status != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SidecarVersionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidecarVersionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		nn3, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.ExpectedVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.ExpectedVersion)))
		i += copy(dAtA[i:], m.ExpectedVersion)
	}
	if len(m.PodsHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.PodsHash)))
		i += copy(dAtA[i:], m.PodsHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SidecarVersionSpec_ViaDeployment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ViaDeployment != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.ViaDeployment.Size()))
		n4, err := m.ViaDeployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SidecarVersionSpec_ViaService) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ViaService != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.ViaService.Size()))
		n5, err := m.ViaService.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SidecarVersionSpec_ViaStatefulSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ViaStatefulSet != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.ViaStatefulSet.Size()))
		n6, err := m.ViaStatefulSet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *SidecarVersionSpec_ViaLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ViaLabelSelector != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.ViaLabelSelector.Size()))
		n7, err := m.ViaLabelSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ViaDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViaDeployment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ViaService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViaService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ViaStatefulSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViaStatefulSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ViaLabelSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViaLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovVersionManager(uint64(len(k))) + 1 + len(v) + sovVersionManager(uint64(len(v)))
			i = encodeVarintVersionManager(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintVersionManager(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintVersionManager(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RetryPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeverRetry {
		dAtA[i] = 0x8
		i++
		if m.NeverRetry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RetryTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.RetryTime))
	}
	if m.RetryInterval != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.RetryInterval.Size()))
		n8, err := m.RetryInterval.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SyncTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.SyncTime)))
		i += copy(dAtA[i:], m.SyncTime)
	}
	if len(m.PodVersionStatus) > 0 {
		for _, msg := range m.PodVersionStatus {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVersionManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PodVersionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodVersionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PodName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.PodName)))
		i += copy(dAtA[i:], m.PodName)
	}
	if len(m.CurrentVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.CurrentVersion)))
		i += copy(dAtA[i:], m.CurrentVersion)
	}
	if len(m.LastUpdateTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.LastUpdateTime)))
		i += copy(dAtA[i:], m.LastUpdateTime)
	}
	if m.StatusCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.StatusMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVersionManager(dAtA, i, uint64(len(m.StatusMessage)))
		i += copy(dAtA[i:], m.StatusMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVersionManager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VersionManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultVersion)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if len(m.SidecarVersionSpec) > 0 {
		for _, e := range m.SidecarVersionSpec {
			l = e.Size()
			n += 1 + l + sovVersionManager(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SidecarVersionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		n += m.Selector.Size()
	}
	l = len(m.ExpectedVersion)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	l = len(m.PodsHash)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SidecarVersionSpec_ViaDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViaDeployment != nil {
		l = m.ViaDeployment.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	return n
}
func (m *SidecarVersionSpec_ViaService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViaService != nil {
		l = m.ViaService.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	return n
}
func (m *SidecarVersionSpec_ViaStatefulSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViaStatefulSet != nil {
		l = m.ViaStatefulSet.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	return n
}
func (m *SidecarVersionSpec_ViaLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViaLabelSelector != nil {
		l = m.ViaLabelSelector.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	return n
}
func (m *ViaDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViaService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViaStatefulSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViaLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovVersionManager(uint64(len(k))) + 1 + len(v) + sovVersionManager(uint64(len(v)))
			n += mapEntrySize + 1 + sovVersionManager(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeverRetry {
		n += 2
	}
	if m.RetryTime != 0 {
		n += 1 + sovVersionManager(uint64(m.RetryTime))
	}
	if m.RetryInterval != nil {
		l = m.RetryInterval.Size()
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SyncTime)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if len(m.PodVersionStatus) > 0 {
		for _, e := range m.PodVersionStatus {
			l = e.Size()
			n += 1 + l + sovVersionManager(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodVersionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	l = len(m.LastUpdateTime)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovVersionManager(uint64(m.StatusCode))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovVersionManager(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVersionManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVersionManager(x uint64) (n int) {
	return sovVersionManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VersionManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidecarVersionSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidecarVersionSpec = append(m.SidecarVersionSpec, &SidecarVersionSpec{})
			if err := m.SidecarVersionSpec[len(m.SidecarVersionSpec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SidecarVersionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidecarVersionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidecarVersionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaDeployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViaDeployment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SidecarVersionSpec_ViaDeployment{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViaService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SidecarVersionSpec_ViaService{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaStatefulSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViaStatefulSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SidecarVersionSpec_ViaStatefulSet{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViaLabelSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SidecarVersionSpec_ViaLabelSelector{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViaDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViaDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViaDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViaService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViaService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViaService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViaStatefulSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViaStatefulSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViaStatefulSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViaLabelSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViaLabelSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViaLabelSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVersionManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVersionManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVersionManager
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVersionManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthVersionManager
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVersionManager(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVersionManager
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeverRetry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeverRetry = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTime", wireType)
			}
			m.RetryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryInterval == nil {
				m.RetryInterval = &types.Duration{}
			}
			if err := m.RetryInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodVersionStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodVersionStatus = append(m.PodVersionStatus, &PodVersionStatus{})
			if err := m.PodVersionStatus[len(m.PodVersionStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodVersionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodVersionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodVersionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersionManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersionManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersionManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVersionManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVersionManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersionManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVersionManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVersionManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVersionManager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVersionManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVersionManager   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("version_manager.proto", fileDescriptor_version_manager_4fec15acf1756441)
}

var fileDescriptor_version_manager_4fec15acf1756441 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0x4b, 0x95, 0x86, 0x95, 0x2c, 0x2c, 0x5c, 0x40, 0x76, 0x51, 0x59, 0x55, 0xeb,
	0x56, 0x46, 0x51, 0x0a, 0xb5, 0x1f, 0x5a, 0xf7, 0xa9, 0x70, 0x5d, 0x40, 0x06, 0xea, 0xc4, 0xa1,
	0x62, 0x03, 0x49, 0x1e, 0x88, 0x35, 0x39, 0x96, 0x08, 0x53, 0x5c, 0x62, 0x77, 0xc9, 0x44, 0x6f,
	0xb9, 0x41, 0x6e, 0x10, 0xe4, 0x1a, 0xb9, 0x81, 0x1f, 0x73, 0x84, 0xc0, 0x27, 0x09, 0xb8, 0xbb,
	0xb4, 0xe4, 0x9f, 0x28, 0xc8, 0x1b, 0xf7, 0xe3, 0x37, 0xdf, 0xce, 0x7c, 0x3b, 0x33, 0xf0, 0x5d,
	0x86, 0x5c, 0x84, 0x2c, 0xf6, 0xa6, 0x34, 0xa6, 0x63, 0xe4, 0x4e, 0xc2, 0x99, 0x64, 0x64, 0x23,
	0x14, 0x32, 0x64, 0x4e, 0x8c, 0xf2, 0x25, 0xe3, 0x97, 0x61, 0x3c, 0x76, 0xb2, 0x3f, 0x68, 0x94,
	0x4c, 0xe8, 0xde, 0x66, 0x67, 0xcc, 0xd8, 0x38, 0xc2, 0x81, 0x22, 0x9e, 0xa7, 0x17, 0x83, 0x20,
	0xe5, 0x54, 0x86, 0x2c, 0xd6, 0xa1, 0xbd, 0x77, 0x25, 0x68, 0x9e, 0x69, 0xd1, 0x63, 0xad, 0x49,
	0x7e, 0x85, 0xb5, 0x00, 0x2f, 0x68, 0x1a, 0x49, 0xcf, 0x5c, 0xd7, 0xb6, 0xba, 0x56, 0xbf, 0xee,
	0x36, 0x0d, 0x6c, 0xf8, 0xc4, 0x83, 0x75, 0x11, 0x06, 0xe8, 0x53, 0x5e, 0x10, 0x3d, 0x91, 0xa0,
	0xdf, 0x2e, 0x75, 0xcb, 0x7d, 0x7b, 0xf7, 0x77, 0xe7, 0xb3, 0x59, 0x39, 0x23, 0x1d, 0x66, 0x84,
	0x46, 0x09, 0xfa, 0x2e, 0x11, 0xf7, 0x30, 0x72, 0x04, 0xdf, 0x72, 0x94, 0x7c, 0xe6, 0x25, 0x2c,
	0x0a, 0xfd, 0x59, 0x7b, 0xb5, 0x6b, 0xf5, 0xed, 0xdd, 0x5f, 0x96, 0x08, 0xbb, 0x39, 0xfd, 0x44,
	0xb1, 0x5d, 0x9b, 0xcf, 0x0f, 0x64, 0x1f, 0xaa, 0x42, 0x52, 0x99, 0x8a, 0x76, 0x55, 0x89, 0xfc,
	0xb8, 0x2c, 0x3b, 0x45, 0x74, 0x4d, 0x40, 0xef, 0x7d, 0x19, 0xc8, 0xfd, 0x84, 0xc9, 0x13, 0x68,
	0x66, 0x21, 0xf5, 0x02, 0x4c, 0x22, 0x36, 0x9b, 0x62, 0x2c, 0x95, 0x4b, 0xf6, 0x6e, 0x7f, 0x89,
	0xf2, 0x59, 0x48, 0x0f, 0x6f, 0xf8, 0xc3, 0x15, 0xb7, 0x91, 0x2d, 0x02, 0x64, 0x08, 0x76, 0x2e,
	0x29, 0x90, 0x67, 0xa1, 0x8f, 0xed, 0x92, 0xd2, 0xdb, 0x5e, 0xae, 0x37, 0xd2, 0xe4, 0xe1, 0x8a,
	0x0b, 0xd9, 0xcd, 0x89, 0x9c, 0x42, 0x4b, 0x29, 0x49, 0x2a, 0xf1, 0x22, 0x8d, 0x3c, 0x81, 0xb2,
	0x5d, 0x56, 0x72, 0x3b, 0x5f, 0x90, 0x33, 0x11, 0x23, 0xcc, 0xf3, 0xcb, 0x2b, 0x5c, 0x40, 0xc8,
	0x0b, 0x20, 0xb9, 0x6c, 0x44, 0xcf, 0x31, 0xd7, 0x8c, 0xd0, 0x97, 0x8c, 0x9b, 0x67, 0xf9, 0x6d,
	0xb9, 0xf0, 0xff, 0x79, 0xcc, 0xc8, 0x84, 0x0c, 0x57, 0xdc, 0x3c, 0xbf, 0x5b, 0x18, 0xd9, 0x81,
	0x16, 0xbe, 0x4a, 0xd0, 0x97, 0x18, 0xdc, 0x34, 0x5e, 0x45, 0x35, 0xde, 0x5a, 0x81, 0x17, 0x9d,
	0xf7, 0x3d, 0xd4, 0x13, 0x16, 0x08, 0x6f, 0x42, 0xc5, 0x44, 0x3d, 0x68, 0xdd, 0xad, 0xe5, 0xc0,
	0x90, 0x8a, 0xc9, 0x01, 0x40, 0xad, 0x48, 0xad, 0xf7, 0x13, 0x34, 0x6e, 0x79, 0x4e, 0x08, 0xac,
	0xc6, 0x74, 0xaa, 0xbd, 0xad, 0xbb, 0xea, 0xbb, 0xd7, 0x05, 0x98, 0x1b, 0xf9, 0x20, 0xe3, 0x67,
	0x68, 0xde, 0xf6, 0xe6, 0x41, 0xd6, 0x5b, 0x0b, 0x5a, 0x77, 0x2b, 0x25, 0x8f, 0xa1, 0xaa, 0xec,
	0x12, 0x66, 0x2c, 0xfe, 0xfc, 0x0a, 0x9b, 0x1c, 0x75, 0x12, 0xff, 0xc5, 0x92, 0xcf, 0x5c, 0x23,
	0xb3, 0xb9, 0x0f, 0xf6, 0x02, 0x4c, 0x5a, 0x50, 0xbe, 0xc4, 0x99, 0x99, 0xd0, 0xfc, 0x93, 0xac,
	0x43, 0x25, 0xa3, 0x51, 0x5a, 0xe4, 0xa6, 0x0f, 0x7f, 0x97, 0xfe, 0xb2, 0x7a, 0x6f, 0x2c, 0xb0,
	0x17, 0x26, 0x84, 0x6c, 0x81, 0x1d, 0x63, 0x86, 0xdc, 0x53, 0x93, 0xa2, 0x34, 0x6a, 0x2e, 0x28,
	0x48, 0xd1, 0xc8, 0x0f, 0x00, 0x7a, 0x00, 0x65, 0x68, 0x6a, 0xad, 0xb8, 0x75, 0x85, 0x3c, 0x0d,
	0xa7, 0x48, 0xfe, 0x81, 0xa6, 0xfe, 0x1d, 0xc6, 0x12, 0x79, 0x46, 0x23, 0xd3, 0x63, 0x1b, 0x8e,
	0xde, 0x3a, 0x4e, 0xb1, 0x75, 0x9c, 0x43, 0xb3, 0x75, 0xdc, 0x86, 0x0a, 0x38, 0x32, 0xfc, 0xde,
	0x6b, 0x0b, 0xaa, 0x7a, 0xdc, 0xf2, 0x37, 0x15, 0xb3, 0xd8, 0xd7, 0x57, 0xe9, 0x72, 0x6a, 0x39,
	0xa0, 0x6e, 0x7a, 0x06, 0x24, 0x61, 0xc1, 0x7c, 0xcd, 0xe8, 0x51, 0xd6, 0x8e, 0x2e, 0x6b, 0xbc,
	0x13, 0x56, 0xf4, 0x8c, 0x19, 0xea, 0x56, 0x72, 0x07, 0xe9, 0x5d, 0x59, 0xd0, 0xba, 0x4b, 0x23,
	0x1b, 0x90, 0xf7, 0x93, 0xa7, 0x9e, 0x58, 0xe7, 0xf2, 0x4d, 0xc2, 0x82, 0x47, 0x74, 0x8a, 0xf9,
	0x7a, 0xf4, 0x53, 0xce, 0x31, 0x9e, 0xaf, 0x47, 0x6d, 0x74, 0xd3, 0xc0, 0x45, 0x93, 0xf6, 0xa1,
	0x15, 0x51, 0x21, 0xbd, 0x34, 0x09, 0xa8, 0x44, 0x5d, 0x57, 0x59, 0x33, 0x73, 0xfc, 0x54, 0xc1,
	0xaa, 0xba, 0x2d, 0xb0, 0x75, 0x45, 0x9e, 0xcf, 0x02, 0x54, 0xf3, 0x54, 0x71, 0x41, 0x43, 0xff,
	0xb2, 0x00, 0xc9, 0x36, 0x34, 0x0d, 0x61, 0x8a, 0x42, 0xd0, 0x31, 0x9a, 0xc1, 0x68, 0x68, 0xf4,
	0x58, 0x83, 0x07, 0xce, 0xd5, 0x75, 0xc7, 0xfa, 0x70, 0xdd, 0xb1, 0x3e, 0x5e, 0x77, 0xac, 0xe7,
	0x5d, 0x6d, 0x4b, 0xc8, 0x06, 0x34, 0x09, 0x07, 0x73, 0x77, 0x06, 0x85, 0x3b, 0xe7, 0x55, 0xf5,
	0x3e, 0x7b, 0x9f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x58, 0xcc, 0x68, 0x23, 0x57, 0x06, 0x00, 0x00,
}
