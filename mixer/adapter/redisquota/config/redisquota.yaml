# this config is created through command
# mixgen adapter -c $GOPATH/src/istio.io/istio/mixer/adapter/redisquota/config/config.proto_descriptor -o $GOPATH/src/istio.io/istio/mixer/adapter/redisquota/config -n redisquota -t quota
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: redisquota
  namespace: istio-system
spec:
  description: 
  session_based: true
  templates:
  - quota
  config: 
---
