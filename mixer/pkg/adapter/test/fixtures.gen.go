// Code generated by go-bindata.
// sources:
// ../../../testdata/config/attributes.yaml
// ../../../template/apikey/template.yaml
// ../../../template/authorization/template.yaml
// ../../../template/checknothing/template.yaml
// ../../../template/listentry/template.yaml
// ../../../template/logentry/template.yaml
// ../../../template/metric/template.yaml
// ../../../template/quota/template.yaml
// ../../../template/reportnothing/template.yaml
// ../../../template/tracespan/tracespan.yaml
// ../../../test/spyAdapter/template/apa/tmpl.yaml
// ../../../test/spyAdapter/template/checkoutput/tmpl.yaml
// DO NOT EDIT!

package test

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TestdataConfigAttributesYaml = []byte(`apiVersion: "config.istio.io/v1alpha2"
kind: attributemanifest
metadata:
  name: istio-proxy
  namespace: istio-system
spec:
  attributes:
    origin.ip:
      valueType: IP_ADDRESS
    origin.uid:
      valueType: STRING
    origin.user:
      valueType: STRING
    request.headers:
      valueType: STRING_MAP
    request.id:
      valueType: STRING
    request.host:
      valueType: STRING
    request.method:
      valueType: STRING
    request.path:
      valueType: STRING
    request.url_path:
      valueType: STRING
    request.query_params:
      valueType: STRING_MAP
    request.reason:
      valueType: STRING
    request.referer:
      valueType: STRING
    request.scheme:
      valueType: STRING
    request.total_size:
      valueType: INT64
    request.size:
      valueType: INT64
    request.time:
      valueType: TIMESTAMP
    request.useragent:
      valueType: STRING
    response.code:
      valueType: INT64
    response.duration:
      valueType: DURATION
    response.headers:
      valueType: STRING_MAP
    response.total_size:
      valueType: INT64
    response.size:
      valueType: INT64
    response.time:
      valueType: TIMESTAMP
    response.grpc_status:
      valueType: STRING
    response.grpc_message:
      valueType: STRING
    source.uid:
      valueType: STRING
    source.user: # DEPRECATED
      valueType: STRING
    source.principal:
      valueType: STRING
    destination.uid:
      valueType: STRING
    destination.principal:
      valueType: STRING
    destination.port:
      valueType: INT64
    connection.event:
      valueType: STRING
    connection.id:
      valueType: STRING
    connection.received.bytes:
      valueType: INT64
    connection.received.bytes_total:
      valueType: INT64
    connection.sent.bytes:
      valueType: INT64
    connection.sent.bytes_total:
      valueType: INT64
    connection.duration:
      valueType: DURATION
    connection.mtls:
      valueType: BOOL
    connection.requested_server_name:
      valueType: STRING
    context.protocol:
      valueType: STRING
    context.proxy_error_code:
      valueType: STRING
    context.timestamp:
      valueType: TIMESTAMP
    context.time:
      valueType: TIMESTAMP
    # Deprecated, kept for compatibility
    context.reporter.local:
      valueType: BOOL
    context.reporter.kind:
      valueType: STRING
    context.reporter.uid:
      valueType: STRING
    api.service:
      valueType: STRING
    api.version:
      valueType: STRING
    api.operation:
      valueType: STRING
    api.protocol:
      valueType: STRING
    request.auth.principal:
      valueType: STRING
    request.auth.audiences:
      valueType: STRING
    request.auth.presenter:
      valueType: STRING
    request.auth.claims:
      valueType: STRING_MAP
    request.auth.raw_claims:
      valueType: STRING
    request.api_key:
      valueType: STRING
    rbac.permissive.response_code:
      valueType: STRING
    rbac.permissive.effective_policy_id:
      valueType: STRING
    check.error_code:
      valueType: INT64
    check.error_message:
      valueType: STRING
    check.cache_hit:
      valueType: BOOL
    quota.cache_hit:
      valueType: BOOL
---
apiVersion: "config.istio.io/v1alpha2"
kind: attributemanifest
metadata:
  name: kubernetes
  namespace: istio-system
spec:
   attributes:
      source.ip:
        valueType: IP_ADDRESS
      source.labels:
        valueType: STRING_MAP
      source.name:
        valueType: STRING
      source.namespace:
        valueType: STRING
      source.owner:
        valueType: STRING
      source.serviceAccount:
        valueType: STRING
      source.services:
        valueType: STRING
      source.workload.uid:
        valueType: STRING
      source.workload.name:
        valueType: STRING
      source.workload.namespace:
        valueType: STRING
      destination.ip:
        valueType: IP_ADDRESS
      destination.labels:
        valueType: STRING_MAP
      destination.metadata:
        valueType: STRING_MAP
      destination.name:
        valueType: STRING
      destination.namespace:
        valueType: STRING
      destination.owner:
        valueType: STRING
      destination.service.uid:
        valueType: STRING
      destination.service.name:
        valueType: STRING
      destination.service.namespace:
        valueType: STRING
      destination.service.host:
        valueType: STRING
      destination.serviceAccount:
        valueType: STRING
      destination.workload.uid:
        valueType: STRING
      destination.workload.name:
        valueType: STRING
      destination.workload.namespace:
        valueType: STRING
      destination.container.name:
        valueType: STRING
`)

func TestdataConfigAttributesYamlBytes() ([]byte, error) {
	return _TestdataConfigAttributesYaml, nil
}

func TestdataConfigAttributesYaml() (*asset, error) {
	bytes, err := TestdataConfigAttributesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../testdata/config/attributes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateApikeyTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/apikey/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/apikey/template.yaml -n apikey
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: apikey
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateApikeyTemplateYamlBytes() ([]byte, error) {
	return _TemplateApikeyTemplateYaml, nil
}

func TemplateApikeyTemplateYaml() (*asset, error) {
	bytes, err := TemplateApikeyTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/apikey/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateAuthorizationTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/authorization/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/authorization/template.yaml -n authorization
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: authorization
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateAuthorizationTemplateYamlBytes() ([]byte, error) {
	return _TemplateAuthorizationTemplateYaml, nil
}

func TemplateAuthorizationTemplateYaml() (*asset, error) {
	bytes, err := TemplateAuthorizationTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/authorization/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateChecknothingTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/checknothing/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/checknothing/template.yaml -n checknothing
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: checknothing
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateChecknothingTemplateYamlBytes() ([]byte, error) {
	return _TemplateChecknothingTemplateYaml, nil
}

func TemplateChecknothingTemplateYaml() (*asset, error) {
	bytes, err := TemplateChecknothingTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/checknothing/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateListentryTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/listentry/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/listentry/template.yaml -n listentry
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: listentry
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateListentryTemplateYamlBytes() ([]byte, error) {
	return _TemplateListentryTemplateYaml, nil
}

func TemplateListentryTemplateYaml() (*asset, error) {
	bytes, err := TemplateListentryTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/listentry/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateLogentryTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/logentry/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/logentry/template.yaml -n logentry
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: logentry
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateLogentryTemplateYamlBytes() ([]byte, error) {
	return _TemplateLogentryTemplateYaml, nil
}

func TemplateLogentryTemplateYaml() (*asset, error) {
	bytes, err := TemplateLogentryTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/logentry/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateMetricTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/metric/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/metric/template.yaml -n metric
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: metric
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateMetricTemplateYamlBytes() ([]byte, error) {
	return _TemplateMetricTemplateYaml, nil
}

func TemplateMetricTemplateYaml() (*asset, error) {
	bytes, err := TemplateMetricTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/metric/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateQuotaTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/quota/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/quota/template.yaml -n quota
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: quota
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateQuotaTemplateYamlBytes() ([]byte, error) {
	return _TemplateQuotaTemplateYaml, nil
}

func TemplateQuotaTemplateYaml() (*asset, error) {
	bytes, err := TemplateQuotaTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/quota/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateReportnothingTemplateYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/reportnothing/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/reportnothing/template.yaml -n reportnothing
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: reportnothing
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateReportnothingTemplateYamlBytes() ([]byte, error) {
	return _TemplateReportnothingTemplateYaml, nil
}

func TemplateReportnothingTemplateYaml() (*asset, error) {
	bytes, err := TemplateReportnothingTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/reportnothing/template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TemplateTracespanTracespanYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/tracespan/tracespan_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/tracespan/tracespan.yaml -n tracespan
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: tracespan
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TemplateTracespanTracespanYamlBytes() ([]byte, error) {
	return _TemplateTracespanTracespanYaml, nil
}

func TemplateTracespanTracespanYaml() (*asset, error) {
	bytes, err := TemplateTracespanTracespanYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../template/tracespan/tracespan.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TestSpyadapterTemplateApaTmplYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/test/spyAdapter/template/apa/tmpl_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/test/spyAdapter/template/apa/tmpl.yaml -n apa
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: apa
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TestSpyadapterTemplateApaTmplYamlBytes() ([]byte, error) {
	return _TestSpyadapterTemplateApaTmplYaml, nil
}

func TestSpyadapterTemplateApaTmplYaml() (*asset, error) {
	bytes, err := TestSpyadapterTemplateApaTmplYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../test/spyAdapter/template/apa/tmpl.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TestSpyadapterTemplateCheckoutputTmplYaml = []byte(`# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/test/spyAdapter/template/checkoutput/tmpl_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/test/spyAdapter/template/checkoutput/tmpl.yaml -n checkoutput
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: checkoutput
  namespace: istio-system
spec:
  descriptor: ""
---
`)

func TestSpyadapterTemplateCheckoutputTmplYamlBytes() ([]byte, error) {
	return _TestSpyadapterTemplateCheckoutputTmplYaml, nil
}

func TestSpyadapterTemplateCheckoutputTmplYaml() (*asset, error) {
	bytes, err := TestSpyadapterTemplateCheckoutputTmplYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../test/spyAdapter/template/checkoutput/tmpl.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../testdata/config/attributes.yaml": TestdataConfigAttributesYaml,
	"../../../template/apikey/template.yaml": TemplateApikeyTemplateYaml,
	"../../../template/authorization/template.yaml": TemplateAuthorizationTemplateYaml,
	"../../../template/checknothing/template.yaml": TemplateChecknothingTemplateYaml,
	"../../../template/listentry/template.yaml": TemplateListentryTemplateYaml,
	"../../../template/logentry/template.yaml": TemplateLogentryTemplateYaml,
	"../../../template/metric/template.yaml": TemplateMetricTemplateYaml,
	"../../../template/quota/template.yaml": TemplateQuotaTemplateYaml,
	"../../../template/reportnothing/template.yaml": TemplateReportnothingTemplateYaml,
	"../../../template/tracespan/tracespan.yaml": TemplateTracespanTracespanYaml,
	"../../../test/spyAdapter/template/apa/tmpl.yaml": TestSpyadapterTemplateApaTmplYaml,
	"../../../test/spyAdapter/template/checkoutput/tmpl.yaml": TestSpyadapterTemplateCheckoutputTmplYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"template": &bintree{nil, map[string]*bintree{
					"apikey": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateApikeyTemplateYaml, map[string]*bintree{}},
					}},
					"authorization": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateAuthorizationTemplateYaml, map[string]*bintree{}},
					}},
					"checknothing": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateChecknothingTemplateYaml, map[string]*bintree{}},
					}},
					"listentry": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateListentryTemplateYaml, map[string]*bintree{}},
					}},
					"logentry": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateLogentryTemplateYaml, map[string]*bintree{}},
					}},
					"metric": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateMetricTemplateYaml, map[string]*bintree{}},
					}},
					"quota": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateQuotaTemplateYaml, map[string]*bintree{}},
					}},
					"reportnothing": &bintree{nil, map[string]*bintree{
						"template.yaml": &bintree{TemplateReportnothingTemplateYaml, map[string]*bintree{}},
					}},
					"tracespan": &bintree{nil, map[string]*bintree{
						"tracespan.yaml": &bintree{TemplateTracespanTracespanYaml, map[string]*bintree{}},
					}},
				}},
				"test": &bintree{nil, map[string]*bintree{
					"spyAdapter": &bintree{nil, map[string]*bintree{
						"template": &bintree{nil, map[string]*bintree{
							"apa": &bintree{nil, map[string]*bintree{
								"tmpl.yaml": &bintree{TestSpyadapterTemplateApaTmplYaml, map[string]*bintree{}},
							}},
							"checkoutput": &bintree{nil, map[string]*bintree{
								"tmpl.yaml": &bintree{TestSpyadapterTemplateCheckoutputTmplYaml, map[string]*bintree{}},
							}},
						}},
					}},
				}},
				"testdata": &bintree{nil, map[string]*bintree{
					"config": &bintree{nil, map[string]*bintree{
						"attributes.yaml": &bintree{TestdataConfigAttributesYaml, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

