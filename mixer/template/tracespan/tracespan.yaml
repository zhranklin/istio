# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/template/tracespan/tracespan_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/template/tracespan/tracespan.yaml -n tracespan
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: tracespan
  namespace: istio-system
spec:
  descriptor: ""
---
